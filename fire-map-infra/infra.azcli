#!/bin/bash

# File to build fire-map webserver which will be running all the time (Apache / PHP)

# For dev purposes only
cd ..
git add .
git commit -m "auto"
git push
cd fire-map-infra

set -x

image=Canonical:0001-com-ubuntu-server-focal:20_04-lts-gen2:latest

# Generate a random suffix between 1 and 1000
int=$(shuf -i 1-1000 -n 1)

# If we are using passwords in the vm create below (default is to use SSH keys)
# Password must have the 3 of the following: 1 lower case character, 1 upper case character, 1 number and 1 special character
# generate a 34 character password (normal, capitals and numbers)
password=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c34)

# rgprefix=fireMapOsr4RightsTools
rgprefix=fireMapOsr4Rights
rg=${rgprefix}${int}

# Don't put capitals in dns name below and it needs to be unique (ie not used in azure at the moment)
dnsname=firemaposr4rights${int}

# adminusername=dave
# adminpassword=${password}

region=westeurope
vmname=${dnsname}vm
vnet=vnet${int}
subnet=subnet${int}
publicIPName=publicIP${int}
nsgname=nsg${int}
nicName=nic${int}


# resource group
az group create \
   --name ${rg} \
   --location ${region}

# virtual network
az network vnet create \
    --resource-group ${rg} \
    --name ${vnet} \
    --subnet-name ${subnet}

# nework security group
az network nsg create \
    --resource-group ${rg} \
    --name ${nsgname}

# public IP and associate with the given DNS name
# Basic or Standard for the ip-sku
az network public-ip create \
    --resource-group ${rg} \
    --name ${publicIPName} \
    --sku Standard \
    --zone 1 \
    --dns-name ${dnsname}

# nic and associate with vnet, publicip
az network nic create \
    --resource-group ${rg} \
    --name ${nicName} \
    --vnet-name ${vnet} \
    --subnet ${subnet} \
    --public-ip-address ${publicIPName} \
    --network-security-group ${nsgname}

# Create vm which runs the cloud init script to provision 

# If one of my keys exist 
# uncomment line below to get ssh keys working
filename="../secrets/sshkey-homelenovo.pub"
if [ -f "$filename" ]; then
az vm create \
    --resource-group ${rg} \
    --name ${vmname} \
    --location ${region} \
    --nics ${nicName} \
    --image ${image} \
    --ssh-key-values ../secrets/sshkey-homelenovo.pub ../secrets/pb_id_rsa.pub ../secrets/sshkey-4790-2004.pub \
    --size Standard_B2ms
else
 echo "ping"
# az vm create \
#     --resource-group ${rg} \
#     --name ${vmname} \
#     --location ${region} \
#     --nics ${nicName} \
#     --image ${image} \
#     --custom-data create_webserver.sh \
#     --admin-username ${adminusername} \
#     --admin-password ${adminpassword} \
#     --size Standard_B1s 

    # --size Standard_B1LS  # £2.82
    # --size Standard_B1s # £6.5pm (1GB and 1CPU)
    # --size Standard_B1ms # £13 (2GB and 1CPU)
    # --size Standard_B2s # £26.63 (4GB)
    # --size Standard_B2ms # £45 (8GB)
fi

# allow port 22 ssh (so that scp will work below)
az network nsg rule create \
    --resource-group ${rg} \
    --nsg-name ${nsgname} \
    --name nsgGroupRuleSSH22 \
    --protocol tcp \
    --priority 998 \
    --destination-port-range 22 \
    --access allow
# /certs directory has been created above


# copy db create script with secret password in it
# could use the run-command way like fire-map-apaache-envvars.sh below
n=0
until [ "$n" -ge 5 ]
do
   scp -o StrictHostKeyChecking=no ../secrets/postgres-create-db.sql dave@${dnsname}.westeurope.cloudapp.azure.com:/home/dave && break
   n=$((n+1)) 
   sleep 15
done

az vm run-command invoke \
    -g ${rg} \
    -n ${vmname} \
    --command-id RunShellScript \
    --scripts @create_firemap_webserver.sh

# adds to end of apache2/envvars 
az vm run-command invoke \
    -g ${rg} \
    -n ${vmname} \
    --command-id RunShellScript \
    --scripts @../secrets/fire-map-apache-envvars.sh

# nginx forwards on port 80 so don't need 443
# allow port 80
az network nsg rule create \
    --resource-group ${rg} \
    --nsg-name ${nsgname} \
    --name nsgGroupRuleWeb80 \
    --protocol tcp \
    --priority 1001 \
    --destination-port-range 80 \
    --access allow

# allow postgres
az network nsg rule create \
    --resource-group ${rg} \
    --nsg-name ${nsgname} \
    --name nsgGroupRulePostgres5432 \
    --protocol tcp \
    --priority 1003 \
    --destination-port-range 5432 \
    --access allow


# backup the old vm DB and restore onto the new vm DB
resourcegroups=$(az group list --query "[?contains(name, '${rgprefix}')]".name --output tsv)

# check 2 resource groups only 
counter=0
for resourcegroup in $resourcegroups
do
    let counter++
    echo "counter is $counter"
    if [ "$counter" = "3" ]; then  
        echo "more than 2 resources groups so exiting - MANUAL intervention needed"
        exit 1
    else
        echo "continuing"
    fi
done

# backup db from old and restore to new
for resourcegroup in $resourcegroups
do
    if [ "$resourcegroup" = "$rg" ]; then  
        echo "have just created new vm on $resourecegroup"
    else
        echo "backing up database from old vm on $resourcegroup"
        pgpassword=$(<../secrets/pgpassword.txt)
        file_name=`date +%d-%m-%Y-%I-%M-%S-%p`.backup
        # pg_dump -Fc -d postgres://postgres:${pgpassword}@firemaposr4rights214.westeurope.cloudapp.azure.com:5432/nasafiremap > $file_name
        pg_dump -Fc -d postgres://postgres:${pgpassword}@$resourcegroup.westeurope.cloudapp.azure.com:5432/nasafiremap > $file_name

        echo "restoring to new vm on $rg"

        # ******HERE*******
    fi
done







# delete old resource groups
groupstodel=$(az group list --query "[?contains(name, '${rgprefix}')]".name --output tsv)

for rgtodel in $groupstodel
do
    if [ "$rgtodel" = "$rg" ]; then  
    echo "not deleting $rgtodel as have just created it"
    else
    echo "not deleting old rg"
	# az group delete \
    #         --name $rgtodel \
    #         --no-wait \
    #         --yes
    fi
done



# eg using ./osrSshCurrentVm.sh
echo -e "\nssh -o StrictHostKeyChecking=no dave@${dnsname}.westeurope.cloudapp.azure.com\n" > sshCurrentVm.sh

# echo -e "password is ${adminpassword}" > password.txt

echo -e "http://${dnsname}.westeurope.cloudapp.azure.com"
